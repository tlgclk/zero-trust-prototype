version: "3.8"

services:
  # Keycloak Identity Provider
  keycloak:
    image: quay.io/keycloak/keycloak:24.0.1
    container_name: keycloak
    command: start-dev --http-enabled=true --hostname-strict=false
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak_password
      KC_HTTP_ENABLED: true
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
      KC_LOG_LEVEL: INFO
    ports:
      - "8080:8080"
    volumes:
      - keycloak_data:/opt/keycloak/data
    networks:
      - zerotrust-net
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/localhost/8080 && echo 'GET /health/ready HTTP/1.1\r\nHost: localhost\r\n\r\n' >&3 && head -1 <&3 | grep -q '200\\|302' && exec 3<&-"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s

  # PostgreSQL Database for Keycloak (Production)
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - zerotrust-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 30s
      timeout: 10s
      retries: 3

  # User Service
  user-service:
    build: 
      context: .
      dockerfile: user-service/Dockerfile
    container_name: user-service
    environment:
      - KEYCLOAK_URL=http://keycloak:8080
      - KEYCLOAK_REALM=zero-trust
      - KEYCLOAK_CLIENT_ID=zero-trust-client
      - KEYCLOAK_CLIENT_SECRET=zero-trust-secret-2024
      - FLASK_ENV=production
    ports:
      - "5001:5000"
    networks:
      - zerotrust-net
    depends_on:
      - keycloak
    restart: unless-stopped

  # Admin Service
  admin-service:
    build: 
      context: .
      dockerfile: admin-service/Dockerfile
    container_name: admin-service
    environment:
      - KEYCLOAK_URL=http://keycloak:8080
      - KEYCLOAK_REALM=zero-trust
      - KEYCLOAK_CLIENT_ID=zero-trust-client
      - KEYCLOAK_CLIENT_SECRET=zero-trust-secret-2024
      - FLASK_ENV=production
    ports:
      - "5002:5000"
    networks:
      - zerotrust-net
    depends_on:
      - keycloak
    restart: unless-stopped

  # Security Test Service
  security-test-service:
    build: 
      context: .
      dockerfile: security-test-service/Dockerfile
    container_name: security-test-service
    environment:
      - KEYCLOAK_URL=http://keycloak:8080
      - KEYCLOAK_REALM=zero-trust
      - KEYCLOAK_CLIENT_ID=zero-trust-client
      - KEYCLOAK_CLIENT_SECRET=zero-trust-secret-2024
      - FLASK_ENV=production
      - ZAP_API_KEY=zero-trust-api-key
    ports:
      - "5003:5000"
    networks:
      - zerotrust-net
    depends_on:
      - keycloak
      - user-service
      - admin-service
      - zap
    restart: unless-stopped

  # OWASP ZAP Security Scanner
  zap:
    image: zaproxy/zap-stable:latest
    container_name: zap
    command: zap.sh -daemon -host 0.0.0.0 -port 8080 -config api.key=zero-trust-api-key -config api.addrs.addr.name=.* -config api.addrs.addr.regex=true
    ports:
      - "8081:8080"
    networks:
      - zerotrust-net
    restart: unless-stopped
    volumes:
      - zap_data:/zap/wrk

  # Nginx Reverse Proxy (HTTPS termination)
  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - zerotrust-net
    depends_on:
      - user-service
      - admin-service
      - security-test-service
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - zerotrust-net
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - zerotrust-net
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  keycloak_data:
  postgres_data:
  prometheus_data:
  grafana_data:
  zap_data:

networks:
  zerotrust-net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
